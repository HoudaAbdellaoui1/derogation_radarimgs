# -*- coding: utf-8 -*-
"""
/***************************************************************************
 derogation
                                 A QGIS plugin
 Ce plugin est compose de 2 parties : La premiere partie concerne l'implementation des bidonvilles, il aide ainsi a faciliter la prise de decision pour faire la derogation.  La deuxieme partie consiste a automatiser le telechargement et le traitement des images Sentinel-1.  
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Abdellaoui Houda- Laghrissi Chafik
        email                : abdellaouihouda2@gmail,com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon,QColor,QCursor
from qgis.PyQt.QtWidgets import QAction,QTableWidgetItem,QMessageBox
from qgis.core import *
from qgis.core import (QgsProject, QgsVectorLayer,QgsFeature,QgsRasterLayer,QgsGeometry)
from qgis.gui import *
from qgis.gui import QgsMessageBar
from pylab import *
import processing
import sys
import csv


from .resources import *
# Initialize Qt resources from file resources.py
# Import the code for the dialog
from .derogation_processing_dialog import derogationDialog
import os.path


class derogation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'derogation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Derogation_imgprocessing')


        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('derogation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):



        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)


        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/derogation_processing/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Derogation_imgprocessing'),
                action)
            self.iface.removeToolBarIcon(action)

    def layer_name(self, name: str):
        return QgsProject.instance().mapLayersByName(name)[0]

    def zone_interet(self):
        global layer
        global layer_list

        canvas = self.iface.mapCanvas()
        mapRenderer = canvas.mapSettings()
        crs = mapRenderer.destinationCrs()
        # bufferLayer = QgsVectorLayer("Point?crs="+str(crs.toWkt()), "point de interet", "memory")

        x = self.dlg.x_projet.text()
        y = self.dlg.y_projet.text()

        # Specify the geometry type
        # layer = QgsVectorLayer('Point?crs=user:100000', 'point de interet' , 'memory')
        layer = QgsVectorLayer("Point?crs=EPSG:3857&field=Nom:string(25)" + str(crs.toWkt()), "New project", "memory")
        prov = layer.dataProvider()
        point = QgsPointXY(float(x), float(y))
        feat = QgsFeature()
        feat.setGeometry(QgsGeometry.fromPointXY(point))
        feat.setAttributes(["New project"])
        prov.addFeatures([feat])
        layer.updateExtents()
        QgsProject.instance().addMapLayers([layer])
        layers = [tree_layer.layer() for tree_layer in QgsProject.instance().layerTreeRoot().findLayers()]

        # layers = self.iface.legendInterface().layers()

        layer_list = []
        self.dlg.combo_choose.clear()
        for layer in layers:
            layer_list.append(layer.name())
        self.dlg.combo_choose.addItems(layer_list)
        self.zoomTo("New project")


    def buffer(self):

        global layer_list
        global layers

        canvas = self.iface.mapCanvas()
        mapRenderer = canvas.mapSettings()
        crs = mapRenderer.destinationCrs()
        self.iface.activeLayer()

    
        rayon = self.dlg.buffer_radius.text()
        distance = self.dlg.combo_choose.currentIndex()

        layer_buff = QgsVectorLayer("Polygon?crs=EPSG:3857" + str(crs.toWkt()), "Buffer", "memory")
        pr = layer_buff.dataProvider()

        for elem in self.FindLayerByName("New project").getFeatures():
            geom = elem.geometry()
            buffer = geom.buffer(float(rayon),10)
            poly = buffer.asPolygon()
            seg = QgsFeature()
            seg.setGeometry(QgsGeometry.fromPolygonXY(poly))
            pr.addFeatures([seg])
            layer_buff.updateExtents()
            layer_buff.setOpacity(0.4)
            # Ajout de la couche
        QgsProject.instance().addMapLayers([layer_buff])
        layer_buff.isValid()
        self.zoomTo("Buffer")


        layers = [tree_layer.layer() for tree_layer in QgsProject.instance().layerTreeRoot().findLayers()]
        # layers = self.iface.legendInterface().layers()
        layer_list = []
        self.dlg.combo_choose.clear()
        for layer in layers:
            layer_list.append(layer.name())
        self.dlg.combo_choose.addItems(layer_list)
        
        
    def afficher_inter(self, row_data, row_number):
        self.dlg.map_display.insertRow(row_number)
        column = 0
        for column_number, data in enumerate(row_data.attributes()):
            if column_number in [0, 3, 7, 10]:
                self.dlg.map_display.setItem(row_number, column, QTableWidgetItem(str(data)))
                column += 1


    def zoomTo(self,name):
        couche_buff= self.FindLayerByName(name)
        feats = couche_buff.getFeatures()
        for fid in feats: 
            couche_buff.select(fid.id())
            self.iface.mapCanvas().zoomToSelected()
            break

    def intersection(self):
        v = self.FindLayerByName('Buffer')
        poly = self.FindLayerByName(self.dlg.combo_choose.currentText())

        a = processing.run("qgis:intersection",{
            "INPUT":poly,
            "PREDICATE":0,
            "OVERLAY":v,
            "OVERLAY_FIELDS_PREFIX":"well",
            "OUTPUT":"memory:",})["OUTPUT"]
        QgsProject.instance().addMapLayer(a)
        # self.dlg.tableView.QgsAttributeTableView(a)
        # canvas = self.iface.mapCanvas()
        # vector_layer_cache = QgsVectorLayerCache(a, 10000)
        # attribute_table_model = QgsAttributeTableModel(vector_layer_cache)
        # attribute_table_model.loadLayer()

        # attribute_table_filter_model = QgsAttributeTableFilterModel(canvas, attribute_table_model)
        # self.dlg.tableView = QgsAttributeTableView()
        # self.dlg.tableView.setModel(attribute_table_filter_model)

        # self.dlg.tableView.show()
        
    def FindLayerByName(self,NameLayer):
        couche = None
        for ch in QgsProject.instance().mapLayers().values():
            if ch.name() == NameLayer:
                couche = ch
                break
        return couche

    # DILIGUIIIIIII THE  CODE FOR THE SECOND PART STARTS HERE 

    def buttons(self):
            self.dlg.btn_valider.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(2))
            self.dlg.btn_continuer.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(3))
            self.dlg.settings.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(3))
            self.dlg.btn_valider_2.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(4))
            self.dlg.sign_up_btn.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(1))
            self.dlg.btn_valider.clicked.connect(lambda: self.dlg.tabWidget.setCurrentIndex(2))

    def on_change(self):
        if self.dlg.comboBox.currentText()=="Sentinel - 1":
            self.dlg.comboBox_2.setEnabled(False)

        else :
            self.dlg.comboBox_2.setEnabled(True)
            
        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = derogationDialog()
            layers = [tree_layer.layer() for tree_layer in QgsProject.instance().layerTreeRoot().findLayers()]
            layer_list = []
            for layer in layers:
                layer_list.append(layer.name())
            self.dlg.combo_choose.addItems(layer_list)

        self.dlg.create_btn.clicked.connect(self.zone_interet)
        self.dlg.analyze_btn.clicked.connect(self.buffer)
        self.dlg.afficher_btn.clicked.connect(self.intersection)
        self.dlg.comboBox.currentIndexChanged.connect(self.on_change)

        self.buttons()
    
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass




